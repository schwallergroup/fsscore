# This file is used to configure your project.
# Read more about the various options under:
# https://setuptools.pypa.io/en/latest/userguide/declarative_config.html
# https://setuptools.pypa.io/en/latest/references/keywords.html

[metadata]
name = intuitive-sc
version = 0.0.1
description = Synthetic feasibility score augmented with human feedback.
author = rneeser
author_email = rebecca.neeser@epfl.ch
license = MIT
license_files = LICENSE.txt
long_description = file: README.rst
long_description_content_type = text/x-rst; charset=UTF-8
url = https://github.com/schwallergroup/intuitive-sc
# Add here related links, for example:
download_url = https://github.com/schwallergroup/intuitive-sc/releases
project_urls =
    Bug Tracker = https://github.com/schwallergroup/intuitive-sc/issues
    Source Code = https://github.com/schwallergroup/intuitive-sc

# Change if running only on Windows, Mac or Linux (comma-separated)
platforms = any

# Add here all kinds of additional classifiers as defined under
# https://pypi.org/classifiers/
classifiers =
    Development Status :: 1 - Planning
    Programming Language :: Python :: 3 :: Only
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.9
    License :: OSI Approved :: MIT License
    Operating System :: OS Independent


[options]
zip_safe = False
packages = find:
include_package_data = True
python_requires = >=3.8
package_dir =
    =src

install_requires =
    finetuning-scheduler
    lightning==2.0.7
    matplotlib
    numpy
    pandas==1.5.3
    pytorch-lightning==2.0.2
    rdkit-pypi==2022.9.5
    requests
    scikit-lean
    scipy==1.10.1
    streamlit
    torch==2.0.0
    torch-geometric==2.3.0
    torch-scatter==2.1.1
    torchvision
    torchaudio
    torchmetrics
    tqdm
    wandb


[options.packages.find]
where = src
exclude =
    tests

[options.extras_require]
# Add here additional requirements for extra features, to install with:
# `pip install intuitive-sc[PDF]` like:
# PDF = ReportLab; RXP

# Add here test requirements (semicolon/line-separated)
tests =
    setuptools
    pytest
    coverage

[options.entry_points]
# Add here console scripts like:
# console_scripts =
#     script_name = intuitive_sc.module:function
# For example:
# console_scripts =
#     fibonacci = intuitive_sc.skeleton:run
# And any other entry points, for example:
# pyscaffold.cli =
#     awesome = pyscaffoldext.awesome.extension:AwesomeExtension

[coverage:run]
branch = True
source = intuitive_sc
omit =
    tests/*
    docs/*

[coverage:paths]
source =
    src/intuitive_sc
    .tox/*/lib/python*/site-packages/choriso

[tool:pytest]
# Specify command line options as you would do when invoking pytest directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
# CAUTION: --cov flags may prohibit setting breakpoints while debugging.
#          Comment those flags to avoid this pytest issue.
addopts =
    --cov intuitive_sc --cov-report term-missing
    --verbose
norecursedirs =
    dist
    build
    .tox
testpaths = tests
# Use pytest markers to select/deselect specific tests
# markers =
#     slow: mark tests as slow (deselect with '-m "not slow"')
#     system: mark end-to-end system tests

[devpi:upload]
# Options for the devpi: PyPI server and packaging tool
# VCS export must be deactivated since we are using setuptools-scm
no_vcs = 1
formats = bdist_wheel

[flake8]
# Some sane defaults for the code style checker flake8
max_line_length = 88
extend_ignore = E203, W503
# ^  Black-compatible
#    E203 and W503 have edge cases handled by black
exclude =
    .tox,
    .git,
    __pycache__,
    docs/source/conf.py,
    build,
    dist,
    *.pyc,
    *.egg-info,
    .cache,
    .eggs,
    data

[pyscaffold]
# PyScaffold's parameters when the project was created.
# This will be used when updating. Do not change!
version = 4.4.1
package = intuitive_sc
extensions =
    github_actions
    pre_commit
